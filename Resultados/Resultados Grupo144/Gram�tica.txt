
Terminales = { var id ; if =  {  } (  ) && > +  -- , function int chars bool true false return write prompt entero cadena for eof }

NoTerminales = { P B I D T S Sa X C F H A K L Q E Ea R Ra U Ua V Va }

Axioma = P

Producciones = {
P -> B P
P -> F P
P -> eof
B -> var T id ;
B -> if ( E ) S
B -> S
B -> for ( I ; E ; D ) { C }
I -> id = E
I -> var T id = E
I -> lambda
D -> -- id
D -> lambda
T -> int
T -> chars
T -> bool
S -> id Sa
S -> return X ;
S -> write ( E ) ; 
S -> prompt ( id ) ;
Sa -> = E ; 
Sa -> ( L ) ;
X -> E
X -> lambda
C -> B C
C -> lambda
F -> function H id ( A ) { C }
H -> T
H -> lambda
A -> T id K
A -> lambda
K -> , T id K
K -> lambda
L -> E Q
L -> lambda
Q -> , E Q
Q -> lambda
E -> R Ea
Ea -> && E
Ea -> lambda
R -> U Ra
Ra -> > R
Ra -> lambda
U -> V Ua
Ua -> + U
Ua -> lambda
V -> id Va
V -> entero
V -> cadena
V -> -- id
V -> true
V -> false
V -> ( E )
Va -> lambda
Va -> ( L )
}

